import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  CircularProgress,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  Tabs,
  Tab
} from '@mui/material';
import dashboardService from '../../services/dashboardService';

// Importando os componentes das abas
import OverviewTab from './tabs/OverviewTab';
import PricesTab from './tabs/PricesTab';
import CategoriesTab from './tabs/CategoriesTab';
import VendorsTab from './tabs/VendorsTab';

const DataAnalysisDashboard = () => {
  const [loading, setLoading] = useState(true);
  const [analysisData, setAnalysisData] = useState(null);
  const [error, setError] = useState(null);
  const [timeRange, setTimeRange] = useState('30d');
  const [tabValue, setTabValue] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Buscar dados reais da API
        const data = await dashboardService.getAnalysisData(timeRange);
        setAnalysisData(data);
        setError(null);
      } catch (err) {
        console.error("Erro ao buscar dados de análise:", err);
        setError("Falha ao carregar dados de análise. Tente novamente mais tarde.");

        // Por enquanto, usando dados simulados como fallback
        const mockData = {
          priceDistribution: [
            { range: "R$ 0-100", count: 42 },
            { range: "R$ 101-200", count: 89 },
            { range: "R$ 201-300", count: 63 },
            { range: "R$ 301-400", count: 37 },
            { range: "R$ 401-500", count: 21 },
            { range: "R$ 500+", count: 14 }
          ],
          priceHistory: [
            { date: '2025-01', avgPrice: 250, minPrice: 180, maxPrice: 320 },
            { date: '2025-02', avgPrice: 245, minPrice: 175, maxPrice: 315 },
            { date: '2025-03', avgPrice: 260, minPrice: 190, maxPrice: 330 },
            { date: '2025-04', avgPrice: 255, minPrice: 185, maxPrice: 325 },
            { date: '2025-05', avgPrice: 270, minPrice: 200, maxPrice: 340 },
            { date: '2025-06', avgPrice: 280, minPrice: 210, maxPrice: 350 }
          ],
          categoryDistribution: [
            { name: 'Cartuchos', value: 45 },
            { name: 'Impressoras', value: 30 },
            { name: 'Acessórios', value: 15 },
            { name: 'Outros', value: 10 }
          ],
          stockAvailability: [
            { status: 'Em Estoque', count: 75 },
            { status: 'Esgotado', count: 12 },
            { status: 'Pré-venda', count: 8 },
            { status: 'Descontinuado', count: 5 }
          ],
          sellerPerformance: [
            { name: 'HP Brasil', reputation: 4.8, sales: 1250, products: 45, avgPrice: 120.50 },
            { name: 'Suprimentos Online', reputation: 4.5, sales: 870, products: 32, avgPrice: 110.30 },
            { name: 'Distribuidora Tech', reputation: 4.2, sales: 650, products: 28, avgPrice: 105.75 },
            { name: 'InfoShop', reputation: 4.6, sales: 920, products: 36, avgPrice: 130.25 },
            { name: 'Mega Supplies', reputation: 4.0, sales: 580, products: 25, avgPrice: 98.40 }
          ]
        };

        setAnalysisData(mockData);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [timeRange]);

  const handleTimeRangeChange = (event) => {
    setTimeRange(event.target.value);
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error && !analysisData) {
    return (
      <Container maxWidth="lg" sx={{ mt: 4 }}>
        <Alert severity="error">{error}</Alert>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg">
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Análise de Dados
        </Typography>
        <Typography variant="body1" color="text.secondary" paragraph>
          Explore tendências, distribuições de preço e desempenho de vendedores em diferentes períodos.
        </Typography>

        {error && analysisData && (
          <Alert severity="warning" sx={{ mb: 2 }}>
            {error} Mostrando dados de exemplo como fallback.
          </Alert>
        )}

        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="análise tabs">
            <Tab label="Visão Geral" />
            <Tab label="Preços" />
            <Tab label="Categorias" />
            <Tab label="Vendedores" />
          </Tabs>

          <FormControl sx={{ minWidth: 150 }}>
            <InputLabel>Período</InputLabel>
            <Select
              value={timeRange}
              label="Período"
              onChange={handleTimeRangeChange}
            >
              <MenuItem value="7d">Última Semana</MenuItem>
              <MenuItem value="30d">Último Mês</MenuItem>
              <MenuItem value="90d">Último Trimestre</MenuItem>
              <MenuItem value="180d">Último Semestre</MenuItem>
              <MenuItem value="365d">Último Ano</MenuItem>
            </Select>
          </FormControl>
        </Box>
      </Box>

      {/* Renderização condicional das abas usando os componentes importados */}
      {tabValue === 0 && <OverviewTab analysisData={analysisData} />}
      {tabValue === 1 && <PricesTab analysisData={analysisData} />}
      {tabValue === 2 && <CategoriesTab analysisData={analysisData} />}
      {tabValue === 3 && <VendorsTab analysisData={analysisData} />}
    </Container>
  );
};

export default DataAnalysisDashboard;
